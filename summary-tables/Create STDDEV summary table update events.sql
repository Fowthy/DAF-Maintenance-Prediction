
-- Drop events if they exist
DROP EVENT IF EXISTS update_stddev_summary_a11_a1;
DROP EVENT IF EXISTS update_stddev_summary_a2_z;
DROP EVENT IF EXISTS update_stddev_summary_w_q1;
DROP EVENT IF EXISTS update_stddev_summary_c_b;
DROP EVENT IF EXISTS update_stddev_summary_x_y;

-- Create STDDEV summary tables update events
CREATE EVENT update_stddev_summary_a11_a1
ON SCHEDULE 
	EVERY 1 MINUTE
DO
	INSERT INTO STDDEV_SUMMARY_A11_A1 (BFC_TIMESTAMP, BFC_SOURCE_ID, DATAPOINT_A11_Position, DATAPOINT_A11_Current, DATAPOINT_A11_DevPos, DATAPOINT_A1_Position, DATAPOINT_A1_Current)
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(BFC_TIMESTAMP) DIV 60 * 60) AS time,
		BFC_SOURCE_ID,
		STDDEV(DATAPOINT_A11_Position),
		STDDEV(DATAPOINT_A11_Current),
		STDDEV(DATAPOINT_A11_DevPos),
		STDDEV(DATAPOINT_A1_Position),
		STDDEV(DATAPOINT_A1_Current)
	FROM DATASET_A11_Axis_A1_Axis
  WHERE BFC_TIMESTAMP >= (select max(BFC_TIMESTAMP) from STDDEV_SUMMARY_A11_A1)
	GROUP BY time, BFC_SOURCE_ID
	ORDER BY time
	ON DUPLICATE KEY UPDATE
		DATAPOINT_A11_Position = VALUES(DATAPOINT_A11_Position),
		DATAPOINT_A11_Current = VALUES(DATAPOINT_A11_Current),
		DATAPOINT_A11_DevPos = VALUES(DATAPOINT_A11_DevPos),
		DATAPOINT_A1_Position = VALUES(DATAPOINT_A1_Position),
		DATAPOINT_A1_Current = VALUES(DATAPOINT_A1_Current);
        
-- ////////////////////////////////////////////////////////////////////////////////////


CREATE EVENT update_stddev_summary_a2_z
ON SCHEDULE 
	EVERY 1 MINUTE
DO
	INSERT INTO STDDEV_SUMMARY_A2_Z (BFC_TIMESTAMP, BFC_SOURCE_ID, DATAPOINT_A2_Position, DATAPOINT_A2_Current, DATAPOINT_A2_PosDev, DATAPOINT_Z_Position, DATAPOINT_Z_Current, DATAPOINT_Z_PosDev, DATAPOINT_Z_Lag, DATAPOINT_Z_ControlDev, DATAPOINT_Z_ContourDev)
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(BFC_TIMESTAMP) DIV 60 * 60) AS time,
		BFC_SOURCE_ID,
		STDDEV(DATAPOINT_A2_Position),
		STDDEV(DATAPOINT_A2_Current),
		STDDEV(DATAPOINT_A2_PosDev),
		STDDEV(DATAPOINT_Z_Position),
		STDDEV(DATAPOINT_Z_Current),
		STDDEV(DATAPOINT_Z_PosDev),
		STDDEV(DATAPOINT_Z_Lag),
		STDDEV(DATAPOINT_Z_ControlDev),
		STDDEV(DATAPOINT_Z_ContourDev)
	FROM DATASET_A2_Axis_Z_Axis
  WHERE BFC_TIMESTAMP >= (select max(BFC_TIMESTAMP) from STDDEV_SUMMARY_A2_Z)
	GROUP BY time, BFC_SOURCE_ID
	ORDER BY time
	ON DUPLICATE KEY UPDATE
		DATAPOINT_A2_Position = VALUES(DATAPOINT_A2_Position),
		DATAPOINT_A2_Current = VALUES(DATAPOINT_A2_Current),
		DATAPOINT_A2_PosDev = VALUES(DATAPOINT_A2_PosDev),
		DATAPOINT_Z_Position = VALUES(DATAPOINT_Z_Position),
		DATAPOINT_Z_Current = VALUES(DATAPOINT_Z_Current);
    
-- ////////////////////////////////////////////////////////////////////////////////////

CREATE EVENT update_stddev_summary_w_q1
ON SCHEDULE 
	EVERY 1 MINUTE
DO
	INSERT INTO STDDEV_SUMMARY_W_Q1 (BFC_TIMESTAMP, BFC_SOURCE_ID, DATAPOINT_W_Position, DATAPOINT_W_Current, DATAPOINT_W_PosDev, DATAPOINT_Q1_Position, DATAPOINT_Q1_Current, DATAPOINT_Q1_PosDev)
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(BFC_TIMESTAMP) DIV 60 * 60) AS time,
		BFC_SOURCE_ID,
		STDDEV(DATAPOINT_W_Position),
		STDDEV(DATAPOINT_W_Current),
		STDDEV(DATAPOINT_W_PosDev),
		STDDEV(DATAPOINT_Q1_Position),
		STDDEV(DATAPOINT_Q1_Current),
		STDDEV(DATAPOINT_Q1_PosDev)
	FROM DATASET_W_Axis_Q1_Axis
  WHERE BFC_TIMESTAMP >= (select max(BFC_TIMESTAMP) from STDDEV_SUMMARY_W_Q1)
	GROUP BY time, BFC_SOURCE_ID
	ORDER BY time
    ON DUPLICATE KEY UPDATE
		DATAPOINT_W_Position = VALUES(DATAPOINT_W_Position),
		DATAPOINT_W_Current = VALUES(DATAPOINT_W_Current),
		DATAPOINT_W_PosDev = VALUES(DATAPOINT_W_PosDev),
		DATAPOINT_Q1_Position = VALUES(DATAPOINT_Q1_Position),
		DATAPOINT_Q1_Current = VALUES(DATAPOINT_Q1_Current),
		DATAPOINT_Q1_PosDev = VALUES(DATAPOINT_Q1_PosDev);

-- ////////////////////////////////////////////////////////////////////////////////////

CREATE EVENT update_stddev_summary_c_b
ON SCHEDULE 
	EVERY 1 MINUTE
DO
	INSERT INTO STDDEV_SUMMARY_C_B (BFC_TIMESTAMP, BFC_SOURCE_ID, DATAPOINT_C_Position, DATAPOINT_C_Current, DATAPOINT_B_Position, DATAPOINT_B_Current, DATAPOINT_B_PosDev)
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(BFC_TIMESTAMP) DIV 60 * 60) AS time,
		BFC_SOURCE_ID,
		STDDEV(DATAPOINT_C_Position),
		STDDEV(DATAPOINT_C_Current),
		STDDEV(DATAPOINT_B_Position),
		STDDEV(DATAPOINT_B_Current),
		STDDEV(DATAPOINT_B_PosDev)
	FROM DATASET_C_Axis_B_Axis
  WHERE BFC_TIMESTAMP >= (select max(BFC_TIMESTAMP) from STDDEV_SUMMARY_C_B)
	GROUP BY time, BFC_SOURCE_ID
	ORDER BY time    
    ON DUPLICATE KEY UPDATE
		DATAPOINT_C_Position = VALUES(DATAPOINT_C_Position),
		DATAPOINT_C_Current = VALUES(DATAPOINT_C_Current),
		DATAPOINT_B_Position = VALUES(DATAPOINT_B_Position),
		DATAPOINT_B_Current = VALUES(DATAPOINT_B_Current),
		DATAPOINT_B_PosDev = VALUES(DATAPOINT_B_PosDev);
        
-- ////////////////////////////////////////////////////////////////////////////////////

CREATE EVENT update_stddev_summary_x_y
ON SCHEDULE 
	EVERY 1 MINUTE
DO
	INSERT INTO STDDEV_SUMMARY_X_Y (BFC_TIMESTAMP, BFC_SOURCE_ID, DATAPOINT_X_Position, DATAPOINT_X_Current, DATAPOINT_X_PosDev, DATAPOINT_X_Lag, DATAPOINT_X_ControlDev, DATAPOINT_X_DontourDev, DATAPOINT_Y_Position, DATAPOINT_Y_Current, DATAPOINT_Y_PosDev)
	SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(BFC_TIMESTAMP) DIV 60 * 60) AS time,
		BFC_SOURCE_ID,
		STDDEV(DATAPOINT_X_Position),
		STDDEV(DATAPOINT_X_Current),
		STDDEV(DATAPOINT_X_PosDev),
		STDDEV(DATAPOINT_X_Lag),
		STDDEV(DATAPOINT_X_ControlDev),
		STDDEV(DATAPOINT_X_ContourDev),
		STDDEV(DATAPOINT_Y_Position),
		STDDEV(DATAPOINT_Y_Current),
		STDDEV(DATAPOINT_Y_PosDev)
	FROM DATASET_X_Axis_Y_Axis
  WHERE BFC_TIMESTAMP >= (select max(BFC_TIMESTAMP) from STDDEV_SUMMARY_X_Y)
	GROUP BY time, BFC_SOURCE_ID
	ORDER BY time
    ON DUPLICATE KEY UPDATE
		DATAPOINT_X_Position = VALUES(DATAPOINT_X_Position),
		DATAPOINT_X_Current = VALUES(DATAPOINT_X_Current),
		DATAPOINT_X_PosDev = VALUES(DATAPOINT_X_PosDev),
		DATAPOINT_X_Lag = VALUES(DATAPOINT_X_Lag),
		DATAPOINT_X_ControlDev = VALUES(DATAPOINT_X_ControlDev),
		DATAPOINT_X_ContourDev = VALUES(DATAPOINT_X_ContourDev),
		DATAPOINT_Y_Position = VALUES(DATAPOINT_Y_Position),
		DATAPOINT_Y_Current = VALUES(DATAPOINT_Y_Current),
		DATAPOINT_Y_PosDev = VALUES(DATAPOINT_Y_PosDev);

-- ////////////////////////////////////////////////////////////////////////////////////

-- disable events
ALTER EVENT update_stddev_summary_a2_z
disable;

ALTER EVENT update_stddev_summary_a11_a1
disable;

ALTER EVENT update_stddev_summary_c_b
disable;

ALTER EVENT update_stddev_summary_w_q1
disable;

ALTER EVENT update_stddev_summary_x_y
disable;

-- show all events
show events